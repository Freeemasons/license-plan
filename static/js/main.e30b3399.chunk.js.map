{"version":3,"sources":["components/Form.js","App.js","serviceWorker.js","index.js"],"names":["licencesPlans","id","value","licenseValue","optionValue","Form","props","state","radioButtonCheckedValue","radioButtonCheckedId","licenceValue","handleChange","bind","handleSelectChange","e","buttonId","target","console","log","this","setState","fluid","xs","lg","action","className","map","plan","i","between","htmlFor","type","name","key","onChange","el","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uSAKMA,EAAgB,CACpB,CAAEC,GAAI,EAAGC,MAAO,IAChB,CAAED,GAAI,EAAGC,MAAO,IAChB,CAAED,GAAI,EAAGC,MAAO,KAGZC,EAAe,CAAC,GAAG,GAAG,IAEtBC,EAAc,CAAC,GAAG,GAAG,IAkHZC,E,kDA9Gb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAMRC,MAAQ,CACNC,wBAAyB,GACzBC,qBAAsB,EACtBC,aAAc,IAPd,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,mBAAqB,EAAKA,mBAAmBD,KAAxB,gBAJT,E,yDAaNE,GAEX,IAAMC,EAAWD,EAAEE,OAAOd,MAE1Be,QAAQC,IAAI,WAAYH,GAExBI,KAAKC,SAAS,CACZZ,wBAAyBO,EAAUN,qBAAsBK,EAAEE,OAAOf,O,yCAInDa,GAEjB,IAAMJ,EAAeI,EAAEE,OAAOd,MAC9Be,QAAQC,IAAIJ,EAAEE,OAAOd,OAErBiB,KAAKC,SAAS,CACZV,aAAcA,M,+BAKT,IAAD,OAEN,OACE,6BACE,kBAAC,OAAD,CAAMW,OAAK,GACT,kBAAC,MAAD,KACE,kBAAC,MAAD,CAAMC,GAAI,EAAGC,GAAI,GACf,0BAAMC,OAAO,GAAGC,UAAU,WACvBzB,EAAc0B,KAAI,SAACC,EAAKC,GACvB,OACE,kBAAC,MAAD,CAAKC,QAAQ,KAAKJ,UAAU,8BAC1B,kBAAC,MAAD,CAAMA,UAAU,iBACd,2BAAOK,QAAQ,GAAGL,UAAU,eAC1B,2BAAOM,KAAK,QAAQ9B,GAAI0B,EAAK1B,GAAI+B,KAAK,QAAQ9B,MAAOyB,EAAKzB,MAAO+B,IAAKN,EAAK1B,GAAIwB,UAAU,2BAClFS,SAAU,EAAKvB,eACtB,0BAAMc,UAAU,wBAAhB,gBAAqDE,EAAK1B,MAI9D,kBAAC,MAAD,CAAMwB,UAAU,6CACd,yBAAKA,UAAU,eACZtB,EAAayB,GADhB,qBAOR,yBAAKH,UAAU,WAEf,kBAAC,MAAD,CAAKA,UAAU,4BACb,kBAAC,MAAD,KACE,yBAAKA,UAAU,2CACb,0BAAMA,UAAU,sBAAhB,uBACA,4BAAQO,KAAK,mBAAmBP,UAAU,yBAAyBS,SAAUf,KAAKN,oBAC/ET,EAAYsB,KAAI,SAAAS,GACf,OACE,4BAAQjC,MAAOiC,EAAIF,IAAKE,GACrBA,UASf,yBAAKV,UAAU,WACf,kBAAC,MAAD,CAAKA,UAAU,kCACb,kBAAC,MAAD,CAAKA,UAAU,IAAf,UACO,0BAAMA,UAAU,sBAAhB,IAAuCN,KAAKZ,MAAMC,wBAA0BW,KAAKZ,MAAMG,aAAa,0BAAMe,UAAU,eAAhB,SAG7G,kBAAC,MAAD,CAAKA,UAAU,4BACb,kBAAC,MAAD,KACE,4BAAQA,UAAU,2BAAlB,aAMJ,kBAAC,MAAD,CAAKA,UAAU,oCACb,kBAAC,MAAD,CAAKA,UAAU,8BAAf,mBACmBN,KAAKZ,MAAME,gC,GAnG7B2B,aCSJC,MAlBf,WAIE,OACE,6BAEE,kBAAC,OAAD,CAAMhB,OAAK,GACT,kBAAC,MAAD,KACE,kBAAC,MAAD,CAAKE,GAAI,GACP,kBAAC,EAAD,WCJQe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.e30b3399.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport { Row, Col, Grid } from \"react-flexbox-grid\";\n\n\n\nconst licencesPlans = [\n  { id: 1, value: 13 },\n  { id: 2, value: 20 },\n  { id: 3, value: 24 },\n];\n\nconst licenseValue = [13,20,24]\n\nconst optionValue = [10,20,30]\n\nclass Form extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSelectChange = this.handleSelectChange.bind(this)\n  }\n\n  state = {\n    radioButtonCheckedValue: 13,\n    radioButtonCheckedId: 1,\n    licenceValue: 10\n  }\n\n  handleChange(e) {\n\n    const buttonId = e.target.value;\n\n    console.log('buttonId', buttonId)\n\n    this.setState({\n      radioButtonCheckedValue: buttonId, radioButtonCheckedId: e.target.id\n    })\n  }\n\n  handleSelectChange(e) {\n\n    const licenceValue = e.target.value\n    console.log(e.target.value)\n\n    this.setState({\n      licenceValue: licenceValue\n    })\n  }\n\n\n  render(){\n\n    return (\n      <div>\n        <Grid fluid>\n          <Row>\n            <Col  xs={8} lg={8}>\n              <form action=\"\" className=\"licence\">\n                {licencesPlans.map((plan,i) => {\n                  return (\n                    <Row between='xs' className=\"licence-container margin-0\">\n                      <Col  className=\"licence__list\" >\n                        <label htmlFor=\"\" className=\"text-margin\">\n                          <input type=\"radio\" id={plan.id} name=\"genre\" value={plan.value} key={plan.id} className=\"licence-container__input\"\n                                 onChange={this.handleChange}/>\n                          <span className=\"text-decoration-font\">LICENSE PLAN#{plan.id}</span>\n                        </label>\n                      </Col>\n\n                      <Col  className=\"licence__list licence__list_addition-text\">\n                        <div className=\"text-margin\">\n                          {licenseValue[i]} per license\n                        </div>\n                      </Col>\n                    </Row>\n                  )\n                  })}\n                <div className=\"border\"></div>\n\n                <Row className=\"licence-amount-container\">\n                  <Col>\n                    <div className=\"licence-amount-container__option-select\">\n                      <span className=\"option-select-text\">Number of licenses:</span>\n                      <select name=\"licenceValueData\" className=\"license-selected-value\" onChange={this.handleSelectChange}>\n                        {optionValue.map(el => {\n                          return(\n                            <option value={el} key={el}>\n                              {el}\n                            </option>\n                            )\n                        })}\n                      </select>\n                    </div>\n                  </Col>\n                </Row>\n\n                <div className=\"border\"></div>\n                <Row className=\"licence-total-amount-container\">\n                  <Col className=\"\">\n                  TOTAL: <span className=\"licence-total-text\">${this.state.radioButtonCheckedValue * this.state.licenceValue}<span className=\"little-text\">us</span></span>\n                  </Col>\n                </Row>\n                <Row className=\"licence-button-container\">\n                  <Col >\n                    <button className=\"Button Button__standart\">\n                      Buy now\n                    </button>\n                  </Col>\n                </Row>\n\n                <Row className=\"licence-selected-plan-container \">\n                  <Col className=\"licence-selected-plan-text\">\n                    Selected plan: #{this.state.radioButtonCheckedId}\n                  </Col>\n                </Row>\n              </form>\n            </Col>\n          </Row>\n        </Grid>\n      </div>\n    )\n  }\n}\n\n\nexport default Form;\n\n","import React from 'react';\nimport './App.css';\nimport { Row, Col, Grid } from \"react-flexbox-grid\";\nimport Form from \"./components/Form\";\n\n\nfunction App() {\n\n\n\n  return (\n    <div>\n\n      <Grid fluid>\n        <Row>\n          <Col lg={8}>\n            <Form />\n          </Col>\n        </Row>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}